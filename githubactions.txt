--------        Practice CI/CD with Github Actions   ( react javascript framework  )        --------

->  You Know what to do .github/workflow
->  CODEOWNER
->  Commands to React App 

"scripts": {
    "start": "react-scripts start", -> Development Mode
    "build": "react-scripts build", -> Generate Folder for Prod
    "test": "react-scripts test",   -> Run the tests
    "eject": "react-scripts eject"  -> I dont know what this do!!!
},

we deploy this app static using surge ``` npm install --global surge [ https://surge.sh/  ] ```
1. npm run build -> To generate the Build Folder to deploy using surge 
2.  Run serge command and config
*   quaint-fish.surge.sh -> Surge Domain


-> Using Prettier what code rules we and our team need to write the same shape
1. Prettier [ https://prettier.io/ ] 
2. install Prettier [ npm install --save-dev --save-exact prettier ]
* Prettier PlayGround [ You need to decide what is the correctly form to continues write the entire project ]
3. create a file -> .prettierrc -> and paste a JSON generate in prettier PlayGround

--------------------------------------------------------------------------------------------------------------------------

-> Discuss about our project Depend the team member
-> The head Branches in our projects are [ main, master, develop ]
*   -> Other branches in our team can be : feature01, feature02, feature03 -> Run Workflow and Pull request to merge with Develop -> Then
    develop -> Run Workflow -> Then merge to Master -> Run Workflow -> Then To Producction 

1. Create a Branches [ Develop & Features what you need ]
2. Create a branch rules protection
    * Require pull request review before mergin
    * dismmos stale pull request aprovals 
    * require review from Code Owner 
    * Require status checks to pass before merging 
    * include admins 

now the branches are protected -> you can create a new branche now you can pull request to merge into develop
* install dependencies
* check coding format
* run automated tests

3. Create the CI.yml -> Do the configs
    * git push --set-upstream origin workflow
    * now you can required a certain folder ( build ) in Main ( Master ) in the branches rules 
    to can merge with the main ( master ) merge

4. Make you team to collaborate ( you need if you want to merge you code )

5. Make your code automate deploy when you collaborate team are review the code and all ok,
    first step 
    -> Make your build folder in the case are avaible
    -> Deploy in surge your build folder
    -> YouÂ´ve to be a credential in the secrets on github
    * in the cmd -> surge token -> surge whoami ->

5.1 -> Upload / Download Artifacts -> You can upload your test & your build folder -> can use actions/upload{download}@v2
5.1.1 -> In this Point You can merge with branch develop your automatize the most important work is check ( prettier ) and Upload 
         but your semantic version or commit are not ok because you are not using the same semantic in the commits and are not standable 
         what fixin, docs or what else you do.

5.2 -> You can fix that ( 5.1.1 ) using semantic version & Conventional Commits 
    * https://semver.org/lang/es/
    * https://www.conventionalcommits.org/en/v1.0.0/
    * instaling semantic realease -> npm install --save-dev semantic-release -> then config release.config.js  ||||

6. Push your test & other things to codecov -> Follow the instrruccion in the CI.YML 
    6.1 You need a Secret in your Repository

7. Commitlint CLI to help with the commit message -> Husky make slow your work flow 
    * npm install --save-dev @commitlint/config-conventional @commitlint/cli
    * then paste the next code in the package.json 
    "husky": {
        "hooks" : {
            "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
    }
    * Then run the next command in CLI -> echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js